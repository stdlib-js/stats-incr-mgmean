{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport exp from '@stdlib/math-base-special-exp';\nimport Float64Array from '@stdlib/array-float64';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving geometric mean.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmgmean( 3 );\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns 2.0\n*\n* v = accumulator( 5.0 );\n* // returns ~3.16\n*\n* v = accumulator( 3.0 );\n* // returns ~3.11\n*\n* v = accumulator( 5.0 );\n* // returns ~4.22\n*\n* v = accumulator();\n* // returns ~4.22\n*/\nfunction incrmgmean( W ) {\n\tvar buf;\n\tvar sum;\n\tvar gm;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( '1Hx8B,Hs', W ) );\n\t}\n\tbuf = new Float64Array( W );\n\tsum = 0.0;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated geometric mean. If not provided a value, the accumulator function returns the current geometric mean.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} geometric mean or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar lnx;\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn gm;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Compute the natural log:\n\t\tlnx = ln( x );\n\n\t\t// Case: incoming value is NaN, the accumulated value is automatically NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tsum = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tN += 1;\n\t\t\tsum += lnx;\n\t\t}\n\t\t// Case: outgoing value is NaN, and, thus, we need to compute the accumulated value...\n\t\telse if ( isnan( buf[ i ] ) ) {\n\t\t\tN = 1;\n\t\t\tsum = lnx;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tif ( isnan( buf[ k ] ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tsum = NaN;\n\t\t\t\t\t\tbreak; // sum is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tN += 1;\n\t\t\t\t\tsum += buf[ k ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current accumulated value nor the incoming value are NaN, so we need to update the accumulated value...\n\t\telse if ( isnan( sum ) === false ) {\n\t\t\tsum += lnx - buf[ i ];\n\t\t}\n\t\t// Case: the current accumulated value is NaN, so nothing to do until the buffer no longer contains NaN values...\n\t\tbuf[ i ] = lnx;\n\n\t\tgm = exp( sum/N );\n\t\treturn gm;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrmgmean;\n"],"names":["incrmgmean","W","buf","sum","gm","N","i","isPositiveInteger","TypeError","format","Float64Array","x","lnx","k","arguments","length","ln","isnan","NaN","exp"],"mappings":";;gkBA4DA,SAASA,EAAYC,GACpB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMC,EAAmBN,GACxB,MAAM,IAAIO,UAAWC,EAAQ,WAAYR,IAO1C,OALAC,EAAM,IAAIQ,EAAcT,GACxBE,EAAM,EACNG,GAAK,EACLD,EAAI,EAWJ,SAAsBM,GACrB,IAAIC,EACAC,EACJ,GAA0B,IAArBC,UAAUC,OACd,OAAW,IAANV,EACG,KAEDD,EASR,GANAE,GAAKA,EAAE,GAAKL,EAGZW,EAAMI,EAAIL,GAGLM,EAAON,GACXN,EAAIJ,EACJE,EAAMe,SAGF,GAAKb,EAAIJ,EACbI,GAAK,EACLF,GAAOS,OAGH,GAAKK,EAAOf,EAAKI,KAGrB,IAFAD,EAAI,EACJF,EAAMS,EACAC,EAAI,EAAGA,EAAIZ,EAAGY,IACnB,GAAKA,IAAMP,EAAI,CACd,GAAKW,EAAOf,EAAKW,IAAQ,CACxBR,EAAIJ,EACJE,EAAMe,IACN,KACA,CACDb,GAAK,EACLF,GAAOD,EAAKW,EACZ,OAIwB,IAAjBI,EAAOd,KAChBA,GAAOS,EAAMV,EAAKI,IAMnB,OAHAJ,EAAKI,GAAMM,EAEXR,EAAKe,EAAKhB,EAAIE,EAEd,CACF"}